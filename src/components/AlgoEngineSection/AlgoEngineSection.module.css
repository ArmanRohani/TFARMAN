/* AlgoEngineSection.module.css */
.algoEngineSection {
    /* background-color: var(--bg-main); From global */
}
.algoEngineContainer {
    display: flex;
    flex-direction: column; 
    align-items: center;
    gap: 2rem; 
}
.algoEngineContent {
    flex: 1;
    max-width: 600px; 
    text-align: center; 
}
.algoEngineContent h3 {
    margin-bottom: 0.75rem;
}
.algoEngineContent ul {
    list-style: none;
    padding-left: 0;
    text-align: left; 
    max-width: 500px; 
    margin: 1.5rem auto; 
}
.algoEngineContent li {
    display: flex;
    align-items: flex-start; 
    gap: 10px; 
    margin-bottom: 0.75rem; 
    font-size: 0.95rem;
    color: var(--text-primary);
}
.algoEngineContent li i {
    color: var(--secondary-accent);
    margin-top: 4px; 
    font-size: 0.9rem; 
}

.visualWrapper { /* New wrapper for relative positioning of popup */
    flex: 1;
    position: relative; /* Crucial for the absolute popup */
    width: 100%;
    max-width: 550px; 
}

.algoEngineVisualAnimated { 
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px; 
    background: linear-gradient(145deg, var(--bg-subtle-accent) 30%, #e0eaff 100%);
    border-radius: 16px; 
    padding: 2.5rem; 
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-lg);
    width: 100%;
    /* max-width: 550px; Moved to visualWrapper */
    position: relative; /* Keep relative for its own pseudo-elements */
    overflow: hidden; 
}

.algoEngineVisualAnimated::before,
.algoEngineVisualAnimated::after {
    content: '';
    position: absolute;
    border-radius: 50%;
    opacity: 0.05;
    z-index: 0;
    pointer-events: none; 
}
.algoEngineVisualAnimated::before { 
    width: 300px;
    height: 300px;
    background-color: var(--primary-accent);
    top: -100px;
    left: -100px;
    animation: subtlePulse 8s infinite ease-in-out;
}
.algoEngineVisualAnimated::after { 
    width: 200px;
    height: 200px;
    background-color: var(--secondary-accent);
    bottom: -80px;
    right: -80px;
    animation: subtlePulse 10s infinite ease-in-out reverse;
}

.animatedCore {
    width: 65px; 
    height: 65px;
    background: linear-gradient(135deg, var(--primary-accent), #0056b3);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.6rem; 
    box-shadow: 0 0 20px rgba(0,123,255,0.5);
    position: absolute; 
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.8); 
    z-index: 10;
    opacity: 0; 
    /* animation set by JS/class */
}

.animatedNode {
    background-color: white;
    color: var(--text-primary);
    padding: 0.5rem 1rem;
    border-radius: 20px; 
    font-size: 0.8rem; 
    font-weight: 500;
    box-shadow: var(--shadow-md);
    position: absolute;
    z-index: 5;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 5px;
    opacity: 0; 
    transform: scale(0.7); 
    transition: transform 0.3s ease;
    /* animation set by JS/class */
}
.animatedNode:hover {
    transform: scale(1.05) !important; 
}
.animatedNode i {
    color: var(--primary-accent);
    font-size: 0.7rem;
}

.nodeRsi { animation: popInNodeAnimation 0.25s 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; animation-play-state: paused; }
.nodePe {  animation: popInNodeAnimation 0.25s 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; animation-play-state: paused; }
.nodeMacd {animation: popInNodeAnimation 0.25s 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; animation-play-state: paused; }

.animatedConnectorSvg {
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: 1;
    pointer-events: none;
}
.animatedConnectorSvg line {
    stroke: var(--primary-accent);
    stroke-width: 2;
    stroke-dasharray: 3 3; 
    stroke-linecap: round;
    opacity: 0;
    /* animation set by class */
}
.lineDrawAnimation { /* Class to be added by JS */
    animation-name: drawSvgLineKeyframe;
    animation-duration: 0.3s; /* Quicker line draw */
    animation-fill-mode: forwards;
    animation-timing-function: ease-out;
}


.executeTradeBtnAnimated {
    background-color: var(--secondary-accent);
    color: white;
    border: 2px solid white;
    padding: 0.6rem 1.2rem; 
    border-radius: 30px;
    font-size: 0.85rem; 
    font-weight: 600;
    box-shadow: 0 4px 10px rgba(40,167,69,0.4);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    position: absolute;
    bottom: 15%; 
    left: 50%;
    transform: translateX(-50%) scale(0.7);
    opacity: 0;
    animation: popInNodeAnimation 0.3s 1.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; 
    animation-play-state: paused;
    z-index: 10;
    transition: background-color 0.3s ease, transform 0.3s ease;
}
.executeTradeBtnAnimated:hover {
    background-color: #1e7e34; 
    transform: translateX(-50%) scale(1.05);
}
.executeTradeBtnAnimated i { font-size: 0.8rem; }

.backtestResultsPopup {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background-color: rgba(248, 250, 252, 0.97); 
    backdrop-filter: blur(4px);
    z-index: 20;
    display: none; 
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    border-radius: 16px; 
    text-align: center;
    opacity: 0;
    transform: scale(0.95);
    transition: opacity 0.3s ease, transform 0.3s ease;
}
.backtestResultsPopup.visible { 
    display: flex; 
    opacity: 1;
    transform: scale(1);
}
.backtestResultsPopup h4 {
    color: var(--primary-accent);
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
}
.resultMetric {
    margin-bottom: 1rem;
    font-size: 1rem;
}
.resultMetric span {
    font-weight: 600;
    color: var(--text-primary);
}
.resultMetric .positive { color: var(--secondary-accent); }
.resultMetric .negative { color: #DC3545; }

.closeResultsBtn { /* This class is on a .cta-button */
    margin-top: 1.5rem;
    padding: 0.5rem 1rem;
    /* Inherits from .cta-button */
}

.simpleChartPlaceholder {
    width: 80%;
    height: 60px;
    background: linear-gradient(to right, var(--bg-subtle-accent) 20%, var(--primary-accent) 80%);
    border-radius: 4px;
    margin-top: 10px;
    opacity: 0.7;
    display: flex;
    align-items: flex-end;
}
.simpleChartPlaceholder div {
    width:10%; 
    background: var(--primary-accent); 
    margin:0 1%;
    /* height set inline in JSX */
}


@keyframes subtlePulse {
    0%, 100% { transform: scale(1); opacity: 0.05; }
    50% { transform: scale(1.1); opacity: 0.08; }
}

@keyframes popInNodeAnimation { /* Shared by nodes and execute button */
    to { opacity: 1; transform: scale(1) translateX(-50%); } /* Ensure translateX for execute button remains */
}
/* Specific initial transform for absolutely positioned nodes that don't need translateX(-50%) */
.animatedNode.nodeRsi, .animatedNode.nodePe, .animatedNode.nodeMacd {
    transform: scale(0.7); /* Override general popInNodeAnimation transform */
}
@keyframes popInNodeAnimation {
    to { opacity: 1; transform: scale(1); }
}


.popInNodeActive { /* Class to be added by JS to core */
     animation: popInCoreAnimation 0.3s 0.1s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
}
@keyframes popInCoreAnimation {
    to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
}

@keyframes drawSvgLineKeyframe {
  from { stroke-dashoffset: var(--line-length, 200); opacity: 0;} 
  to { stroke-dashoffset: 0; opacity: 0.7;}
}


@media (min-width: 992px) { 
    .algoEngineContainer {
        flex-direction: row;
        gap: 3rem; 
        align-items: center; 
    }
     .algoEngineContent {
        text-align: left; 
        max-width: 500px; 
    }
    .algoEngineContent ul {
        margin: 1.5rem 0; 
    }
    .algoEngineVisualAnimated { 
        min-height: 380px; 
        max-width: none; 
    }
}

@media (max-width: 768px) {
    .algoEngineVisualAnimated { min-height: 320px; padding: 1.5rem; } 
    .animatedCore { width: 60px; height: 60px; font-size: 1.5rem; margin-bottom: 2rem;}
    .animatedNode { padding: 0.4rem 0.8rem; font-size: 0.8rem; }
    .nodeRsi { top: 15% !important; left: 10% !important; } /* !important to override inline if needed */
    .nodePe { top: 45% !important; left: 2% !important;  }
    .nodeMacd { top: 25% !important; right: 5% !important; }
    .executeTradeBtnAnimated { bottom: 10%;}
    .animatedConnectorSvg line { stroke-width: 1.5px; stroke-dasharray: 2 2;}
}
